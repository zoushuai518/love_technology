<?xml version='1.0' encoding='utf-8'?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- Note:  A "Server" is not itself a "Container", so you may not
     define subcomponents such as "Valves" at this level.
     Documentation at /docs/config/server.html
 -->
<Server port="8005" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
  <!-- Security listener. Documentation at /docs/config/listeners.html
  <Listener className="org.apache.catalina.security.SecurityListener" />
  -->
  <!--APR library loader. Documentation at /docs/apr.html -->
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <!-- Prevent memory leaks due to use of particular java/javax APIs-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

  <!-- Global JNDI resources
       Documentation at /docs/jndi-resources-howto.html
  -->
  <GlobalNamingResources>
    <!-- Editable user database that can also be used by
         UserDatabaseRealm to authenticate users
    -->
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
  </GlobalNamingResources>

  <!-- A "Service" is a collection of one or more "Connectors" that share
       a single "Container" Note:  A "Service" is not itself a "Container",
       so you may not define subcomponents such as "Valves" at this level.
       Documentation at /docs/config/service.html
   -->
  <!-- zs TODO Tomcat Service config -->
  <Service name="Catalina">

    <!--The connectors can use a shared executor, you can define one or more named thread pools-->
    <!--
    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
        maxThreads="150" minSpareThreads="4"/>
    -->


    <!-- A "Connector" represents an endpoint by which requests are received
         and responses are returned. Documentation at :
         Java HTTP Connector: /docs/config/http.html (blocking & non-blocking)
         Java AJP  Connector: /docs/config/ajp.html
         APR (HTTP/AJP) Connector: /docs/apr.html
         Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
    -->
    <!-- tomcat默认监听 8080端口号 -->
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    <!-- zs config 基于端口号的虚拟主机,配合nginx -->
    <!-- <Connector port="8088" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->
    <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443
         This connector uses the NIO implementation that requires the JSSE
         style configuration. When using the APR/native implementation, the
         OpenSSL style configuration is required as described in the APR/native
         documentation -->
    <!--
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
               maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
               clientAuth="false" sslProtocol="TLS" />
    -->

    <!-- Define an AJP 1.3 Connector on port 8009 -->
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />


    <!-- An Engine represents the entry point (within Catalina) that processes
         every request.  The Engine implementation for Tomcat stand alone
         analyzes the HTTP headers included with the request, and passes them
         on to the appropriate Host (virtual host).
         Documentation at /docs/config/engine.html -->

    <!-- You should set jvmRoute to support load-balancing via AJP ie :
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
    -->
    <!-- <Engine name="Catalina" defaultHost="localhost"> -->
    <Engine name="Catalina" defaultHost="ee1.weimob.com">

      <!--For clustering, please take a look at documentation at:
          /docs/cluster-howto.html  (simple how to)
          /docs/config/cluster.html (reference documentation) -->
      <!--
      <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
      -->

      <!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack -->
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key "UserDatabase".  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>

      <!-- tomcat defaultHost config -->
      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">

        <!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html -->
        <!--
        <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
        -->

        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern="common" -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />

      </Host>

      <!-- tomcat ee1.weimo.com host config -->
      <!-- <context>是Host标记的子元素，表示一个虚拟目录，它主要有两个属性，path就相当于虚拟目录名字，而docbase则是具体的文件位置。docBase可以是绝对路径也可以是相对路径，本文中使用相对路径。 -->
      <Host name="ee1.weimob.com"  appBase="ee1"
        unpackWARs="true" autoDeploy="true"
        xmlValidation="false" xmlNamespaceAware="false">
        <!-- <Context path="" reloadable="true"
        docBase="e1"
        workDir="" /> -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="ee1.weimob.com_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
      </Host>
      <!-- tomcat ee2.weimo.com host config -->
      <!-- 如果想要一个应用而绑定多个域名的方法，例如可以通过 http://ee2.weimob.com/或者http://ee22.weimob.com/都能够访问ee2目录下的目录名称为“e2”的工程。那么需要这样配置 -->
      <Host name="ee2.weimob.com"  appBase="ee2"
        unpackWARs="true" autoDeploy="true"
        xmlValidation="false" xmlNamespaceAware="false">
        <!-- 这里只是增加了Alias属性 -->
        <Alias>ee2.weimob.com</Alias>
        <Alias>ee22.weimob.com</Alias>
        <!-- <Context path="" reloadable="true"
        docBase="e2"
        workDir="" /> -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="ee2.weimob.com_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
      </Host>
      <!--
        /etc/hosts
        127.0.0.1 ee1.weimob.com
        127.0.0.1 ee2.weimob.com
        127.0.0.1 ee22.weimob.com
      -->
      <!--
        按照上面的配置:
        1).如果我在浏览器中输入http://localhost:8080 则访问%TOMCAT_HOME%/webapps/ROOT下的网站 
        2).如果输入http://ee1.weimob.com:8080 则访问 %TOMCAT_HOME%/ee1/ROOT 下的网站 
        3).如果输入http://ee2.weimob.com:8080(http://ee22.weimob.com:8080) 则访问%TOMCAT_HOME%/ee2/ROOT 下的网站.

        在shell终端执行: echo $TOMCAT_HOME 可以查看tomcat根目录
      -->
    </Engine>
  </Service>

  <!-- zs config Catalina2 -->
  <Service name="Catalina2">

    <Connector port="8081" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

    <Connector port="8010" protocol="AJP/1.3" redirectPort="8443" />

    <Engine name="Catalina2" defaultHost="localhost">

      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>

      <!-- Catalina2 tomcat prot:8091 defaultHost config -->
      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">

        <Alias>ee2-1.weimob.com</Alias>
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="ee2-1.weimob.com_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
           <Context path="" docBase="/var/www/html/zsdemosite/java/ee2-1/" />

      </Host>
      <Host name="ee2-2.weimob.com"  appBase="testapp"
            unpackWARs="true" autoDeploy="true">
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="ee2-2.weimob.com_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
        <Context path="/path-web" docBase="/var/www/html/zsdemosite/java/ee2-2/path-web" />
        <Context path="" docBase="/var/www/html/zsdemosite/java/ee2-2/" />
      </Host>
      <!--
        /etc/hosts
        127.0.0.1 ee2-1.weimob.com
        127.0.0.1 ee2-2.weimob.com
      -->
      <!--
        按照上面的配置:
        1).如果我在浏览器中输入http://localhost:8081(http://ee2-1.weimob.com:8081) 则访问/var/www/html/zsdemosite/java/ee2-1/下的网站
        2).如果输入http://ee2-2.weimob.com:8081 则访问/var/www/html/zsdemosite/java/ee2-2/ 下的网站.
        2-1).如果输入http://ee2-2.weimob.com:8081/path-web/ 则访问/var/www/html/zsdemosite/java/ee2-2/下的网站的path-web目录.
      -->
      <!--
        该server下面两个service节点，每个service节点可以用Connector配置一个监听端口，service里有只能有一个Engine节点，它接受同级目录Connector端口的请求，可以通过defaultHost属性默认指向一个Host，Host就是一个该Connector端口下的域名，下面可以用Context配置多个虚拟目录。

        即：server下面可以有多个service，用于配置不同监听端口
        service下面可以有多个Host，用于配置该端口下的不同域名
        Host里可以包含多个Context，用于配置该端口该域名下的不同虚拟目录
      -->
      <!--
        Host下的Alias是一个域名别称，可以配置多个域名。

        Host里如果没有Context节点，则非webapps文件夹下，直接不用虚拟目录访问，会抛404找不到文件的错误，比如上面配置中ee2-2.weimob.com:8081域名下必须用虚拟目录比如这里的path-web来访问

        Host下面的context节点配置为：<Context path="" 后，则这个目录为默认的访问目录，比如http://ee2-2.weimob.com:8081/，访问的/var/www/html/zsdemosite/java/ee2-2/下面的文件。

        这里因为我有默认首页，因此直接输入域名和端口可以直接访问到默认的index.jsp页面，如果没有默认页，可能会抛错，需要配置可以/为列目录，在conf/web.xml里
        <init-param>
            <param-name>listings</param-name>
            <param-value>true</param-value>
        </init-param>
        把这个的param-value改为true即为可以列目录了。

        备注: 当然，如果不配置server.xml文件，直接把网站放到webapps，默认会自动加载该网站，因此大多数情况，我们都不用对server.xml文件做任何修改。
      -->
    </Engine>
  </Service>

  <!-- zs config java ee project test -->
  <Service name="javaEeProjectTest">

    <!-- 监听8082端口号 -->
    <Connector port="8082" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

    <Connector port="8011" protocol="AJP/1.3" redirectPort="8443" />

    <Engine name="javaEeProjectTest" defaultHost="localhost">

      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>

      <Host name="ee-test-project.weimob.com"  appBase="testapp"
            unpackWARs="true" autoDeploy="true">
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="ee-test-project.weimob.com_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
        <Context path="" docBase="/var/www/html/zsdemosite/java/ee-test-project/" />
      </Host>
      <!--
        nginx, tomcat 联合配置; 此处我的配置nginx只是负责转发,其它的都tomcat来处理; 2015-08-12

        nginx配置 ee.weimob.com域名
        nginx配置转发
        localion ~ .*.jsp {
            proxy_pass http://ee-test-project.weimob.com:8082
        }
        /etc/hosts
        127.0.0.1 ee-test-project.weimob.com
        127.0.0.1 ee.weimob.com

        浏览器输入 http://ee.weimob.com 即可访问
      -->
    </Engine>
  </Service>
</Server>
