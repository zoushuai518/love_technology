kill命令:

{
	#来自互联网:
	========================================kill 终止进程================================
	kill 终止进程
	有十几种控制进程的方法，下面是一些常用的方法:
	kill -STOP [pid]
	发送SIGSTOP (17,19,23)停止一个进程，而并不消灭这个进程。
	kill -CONT [pid]
	发送SIGCONT (19,18,25)重新开始一个停止的进程。
	kill -KILL [pid]
	发送SIGKILL (9)强迫进程立即停止，并且不实施清理操作。
	kill -9 -1
	终止你拥有的全部进程。
	SIGKILL 和 SIGSTOP 信号不能被捕捉、封锁或者忽略，但是，其它的信号可以。所以这是你的终极武器。
	==================================================范例==============================
	$ ps
	PID TTY TIME COMMAND
	5800 ttyp0 00:00:00 bash
	5835 ttyp0 00:00:00 ps
	可以看到,显示地项目共分为四项,依次为PID(进程ID)、TTY(终端名称)、TIME(进程执行时 间)、COMMAND(该进程地命令行输入).
	可以运用u选项来查看进程所有者及其他少许详细信息,如下所示：
	$ ps u
	USER PID %CPU %MEM USZ RSS TTY STAT START TIME COMMAND
	test 5800 0.0 0.4 1892 1040 ttyp0 S Nov27 0:00 -bash
	test 5836 0.0 0.3 2528 856 ttyp0 R Nov27 0:00 ps u
	在bash进程前面有条横线,意味着该进程便是用户地登录shell,所以对于一个登录用户来说带短横线地进程只有一个.还可以看 到%CPU、%MEM两个选项,前者指该进程占用地CPU时间
	和总时间地百分比;后者指该进程占用地内存和总内存地百分比.
	在这种情况下看到了所有控制终端地进程;当然对于其他那些没有控制终端地进程 还是没有观察到,所以这时就需要运用x选项.运用x选项可以观察到所有地进程情况.
	1)ps a 显示现行终端机下的所有程序，包括其他用户的程序。
	2)ps -A 显示所有程序。
	3)ps c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。
	4)ps -e 此参数的效果和指定"A"参数相同。
	5)ps e 列出程序时，显示每个程序所使用的环境变量。
	6)ps f 用ASCII字符显示树状结构，表达程序间的相互关系。
	7)ps -H 显示树状结构，表示程序间的相互关系。
	8)ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。
	9)ps s 采用程序信号的格式显示程序状况。
	10)ps S 列出程序时，包括已中断的子程序资料。
	11)ps -t<终端机编号> 　指定终端机编号，并列出属于该终端机的程序的状况。
	12)ps u 　以用户为主的格式来显示程序状况。
	13)ps x 　显示所有程序，不以终端机来区分。

	最常用的方法是ps -aux,然后再用管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。

}

